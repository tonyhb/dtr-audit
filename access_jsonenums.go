// generated by jsonenums -type=Access; DO NOT EDIT

package main

import (
	"encoding/json"
	"fmt"
)

var (
	_AccessNameToValue = map[string]Access{
		"read-only":  ReadOnly,
		"read-write": ReadWrite,
		"admin":      Admin,
	}

	_AccessValueToName = map[Access]string{
		ReadOnly:  "read-only",
		ReadWrite: "read-write",
		Admin:     "admin",
	}
)

func init() {
	var v Access
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_AccessNameToValue = map[string]Access{
			interface{}(ReadOnly).(fmt.Stringer).String():  ReadOnly,
			interface{}(ReadWrite).(fmt.Stringer).String(): ReadWrite,
			interface{}(Admin).(fmt.Stringer).String():     Admin,
		}
	}
}

// MarshalJSON is generated so Access satisfies json.Marshaler.
func (r Access) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _AccessValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Access: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Access satisfies json.Unmarshaler.
func (r *Access) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Access should be a string, got %s", data)
	}
	v, ok := _AccessNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Access %q", s)
	}
	*r = v
	return nil
}
